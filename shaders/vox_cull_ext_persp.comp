#version 450
#extension GL_GOOGLE_include_directive : enable

layout (local_size_x = 64, local_size_y = 1) in;

#include "common.h"

// stride: 48 bytes
struct Draw_Data {
  float half_size_x;
  float half_size_y;
  float half_size_z;
  uint first_vertex;
  uint first_instance;
  uint vertex_count0;
  uint vertex_count1;
  uint vertex_count2;
  uint vertex_count3;
  uint vertex_count4;
  uint vertex_count5;
  uint cull_mask;
};

// stride: 32 bytes
struct Transform {
  quat rotation;
  vec3 position;
  float scale;
};

// stride: 32 bytes
struct Draw_Command {
  uint index_count;
  uint instance_count;
  uint first_index;
  uint vertex_offset;
  uint first_instance;
};

// stride: 32 bytes
struct Vertex_Count {
  uint count0;
  uint count1;
  uint count2;
  uint count3;
  uint count4;
  uint debug_data1;
  uint debug_data2;
  uint debug_data3;
};

// stride: 16 bytes
struct Draw_Count {
  uint count;
};

// storage buffer
layout (std140, set = 0, binding = 0) readonly buffer Storage_Buffer {
  Draw_Data in_draws[];
};

layout (std140, set = 0, binding = 1) readonly buffer Transform_Buffer {
  Transform transforms[];
};

layout (std140, set = 0, binding = 2) writeonly buffer Indirect_Buffer {
  Draw_Command out_draws[];
};

layout (std140, set = 0, binding = 3) writeonly buffer Vertex_Buffer {
  Vertex_Count vertex_counts[];
};

layout (std140, set = 0, binding = 4) writeonly buffer Draw_Counts {
  Draw_Count draw_count[];
};

layout (set = 1, binding = 0) uniform sampler2D depth_pyramid;

PUSH_CONSTANT Pass_Info {
  mat4 projview_matrix;
  vec3 camera_front;
  uint cull_mask;
  vec3 camera_position;
  uint pass_id;
  uint draw_offset;
  uint in_offset;
  uint num_draws;
};

const vec3 vox_normals[6] = {
  {-1.0,  0.0,  0.0},
  { 1.0,  0.0,  0.0},
  { 0.0, -1.0,  0.0},
  { 0.0,  1.0,  0.0},
  { 0.0,  0.0, -1.0},
  { 0.0,  0.0,  1.0}
};

void main() {
  uint draw_index = gl_GlobalInvocationID.x;

  // check if we're out of bounds
  if (draw_index >= num_draws)
    return;

  Draw_Data d = in_draws[draw_index + in_offset];

  Transform transform = transforms[d.first_instance];

  uint vertex_count[6] = {
    d.vertex_count0,
    d.vertex_count1,
    d.vertex_count2,
    d.vertex_count3,
    d.vertex_count4,
    d.vertex_count5,
  };

  uint vertex_offset = d.first_vertex;
  uint out_id = (draw_index + draw_offset) * 3;

  if ((d.cull_mask & cull_mask) == 0) {
    return;
  }

  vec3 box[3];
  box[0] = rotate(vec3(d.half_size_x, 0.0, 0.0), transform.rotation);
  box[1] = rotate(vec3(0.0, d.half_size_y, 0.0), transform.rotation);
  box[2] = rotate(vec3(0.0, 0.0, d.half_size_z), transform.rotation);

  // check if camera is outside of bounding sphere
  float radius = transform.scale * max(d.half_size_x*d.half_size_x+d.half_size_y+d.half_size_y,
                                       max(d.half_size_x*d.half_size_x+d.half_size_z+d.half_size_z,
                                           d.half_size_z*d.half_size_z+d.half_size_y+d.half_size_y));
  vec3 diff = transform.position - camera_position;
  float dist = dot(diff, diff);
  if (dist > radius) {
    // perform occlussion culling

    // bounding rect
    vec2 aabb_min = { 1.0, 1.0 };
    vec2 aabb_max = { -1.0, -1.0 };
    float max_depth = 0.0;

    const vec3 muls[8] = {
      { -1.0f, -1.0f, -1.0f },
      { -1.0f, -1.0f, 1.0f },
      { -1.0f, 1.0f, -1.0f },
      { -1.0f, 1.0f, 1.0f },
      { 1.0f, -1.0f, -1.0f },
      { 1.0f, -1.0f, 1.0f },
      { 1.0f, 1.0f, -1.0f },
      { 1.0f, 1.0f, 1.0f },
    };

    for (int i = 0; i < 8; i++) {
      // calculate OBB point
      vec3 basis[3];
      basis[0] = box[0] * muls[i].x * transform.scale;
      basis[1] = box[1] * muls[i].y * transform.scale;
      basis[2] = box[2] * muls[i].z * transform.scale;
      vec3 point;
      point.x = basis[0].x + basis[1].x + basis[2].x + transform.position.x;
      point.y = basis[0].y + basis[1].y + basis[2].y + transform.position.y;
      point.z = basis[0].z + basis[1].z + basis[2].z + transform.position.z;
      // project OBB point
      vec4 ndc = projview_matrix * vec4(point, 1.0);
      ndc.xyz /= ndc.w;
      aabb_min.x = min(aabb_min.x, ndc.x);
      aabb_min.y = min(aabb_min.y, ndc.y);
      aabb_max.x = max(aabb_max.x, ndc.x);
      aabb_max.y = max(aabb_max.y, ndc.y);
      max_depth = max(max_depth, ndc.z);
    }
    // convert to UV space
    aabb_min = aabb_min * 0.5 + 0.5;
    aabb_max = aabb_max * 0.5 + 0.5;
    // compute depth level
    vec2 pyramid_size = textureSize(depth_pyramid, 0);
    float width = (aabb_max.x - aabb_min.x) * pyramid_size.x;
    float height = (aabb_max.y - aabb_min.y) * pyramid_size.y;
    float level = floor(log2(max(width, height)));
    // do culling
    vec2 pos = (aabb_min + aabb_max) * 0.5;
    float depth = textureLod(depth_pyramid, pos, 0).r;
    if (depth > max_depth)
      return;
  }

  uint last_written_vertex = 0xffffffff;
  uint last_id;

  // backface culling
  uint num_added = 0;
  for (int i = 0; i < 6; i++) {
    vec3 basis[3];
    basis[0] = -box[0] * vox_normals[i].x * transform.scale;
    basis[1] = -box[1] * vox_normals[i].y * transform.scale;
    basis[2] = -box[2] * vox_normals[i].z * transform.scale;
    vec3 point;
    point.x = basis[0].x + basis[1].x + basis[2].x + transform.position.x;
    point.y = basis[0].y + basis[1].y + basis[2].y + transform.position.y;
    point.z = basis[0].z + basis[1].z + basis[2].z + transform.position.z;

    vec3 dist = point - camera_position;
    vec3 normal = rotate(vox_normals[i], transform.rotation);
    if (dot(dist, normal) <= 0.0) {
      // try to merge drawcalls
      if (last_written_vertex == vertex_offset) {
        out_draws[draw_offset * 3 + last_id].index_count += vertex_count[i] * 3 / 2;
      } else {
        uint id = atomicAdd(draw_count[pass_id].count, 1);
        out_draws[draw_offset * 3 + id].index_count = vertex_count[i] * 3 / 2;
        out_draws[draw_offset * 3 + id].instance_count = 1;
        out_draws[draw_offset * 3 + id].first_index = vertex_offset * 3 / 2;
        out_draws[draw_offset * 3 + id].vertex_offset = d.first_vertex;
        out_draws[draw_offset * 3 + id].first_instance = d.first_instance;
        last_id = id;
        num_added++;
      }

      last_written_vertex = vertex_offset + vertex_count[i];
    }
    vertex_offset += vertex_count[i];
  }

  if (num_added > 0) {
    vertex_offset = d.first_vertex;
    vertex_counts[draw_offset + d.first_instance].count0 = (vertex_offset + d.vertex_count0); vertex_offset += d.vertex_count0;
    vertex_counts[draw_offset + d.first_instance].count1 = (vertex_offset + d.vertex_count1); vertex_offset += d.vertex_count1;
    vertex_counts[draw_offset + d.first_instance].count2 = (vertex_offset + d.vertex_count2); vertex_offset += d.vertex_count2;
    vertex_counts[draw_offset + d.first_instance].count3 = (vertex_offset + d.vertex_count3); vertex_offset += d.vertex_count3;
    vertex_counts[draw_offset + d.first_instance].count4 = (vertex_offset + d.vertex_count4); vertex_offset += d.vertex_count4;
  }
  vertex_counts[draw_offset + d.first_instance].debug_data1 = num_added;
}
