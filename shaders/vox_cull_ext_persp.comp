#version 450
#extension GL_GOOGLE_include_directive : enable

layout (local_size_x = 64, local_size_y = 1) in;

#include "common.h"

#include "culling.h"

// storage buffer
layout (std140, set = 0, binding = 0) readonly buffer Storage_Buffer {
  Draw_Data in_draws[];
};

layout (std140, set = 0, binding = 1) readonly buffer Transform_Buffer {
  Transform transforms[];
};

layout (std140, set = 0, binding = 2) writeonly buffer Indirect_Buffer {
  Draw_Command out_draws[];
};

layout (std140, set = 0, binding = 3) writeonly buffer Vertex_Buffer {
  Vertex_Count vertex_counts[];
};

layout (std140, set = 0, binding = 4) writeonly buffer Draw_Counts {
  Draw_Count draw_count[];
};

layout (set = 1, binding = 0) uniform sampler2D depth_pyramid;

PUSH_CONSTANT Pass_Info {
  mat4 projview_matrix;
  vec3 camera_front;
  uint cull_mask;
  vec3 camera_position;
  uint pass_id;
  uint draw_offset;
  uint in_offset;
  uint num_draws;
};

const vec3 vox_normals[6] = {
  {-1.0,  0.0,  0.0},
  { 1.0,  0.0,  0.0},
  { 0.0, -1.0,  0.0},
  { 0.0,  1.0,  0.0},
  { 0.0,  0.0, -1.0},
  { 0.0,  0.0,  1.0}
};

void main() {
  uint draw_index = gl_GlobalInvocationID.x;

  // check if we're out of bounds
  if (draw_index >= num_draws)
    return;

  Draw_Data d = in_draws[draw_index + in_offset];

  Transform transform = transforms[d.first_instance];

  uint vertex_count[6] = {
    d.vertex_count0,
    d.vertex_count1,
    d.vertex_count2,
    d.vertex_count3,
    d.vertex_count4,
    d.vertex_count5,
  };

  uint vertex_offset = d.first_vertex;
  uint out_id = (draw_index + draw_offset) * 3;

  if ((d.cull_mask & cull_mask) == 0) {
    return;
  }

  vec3 box[3];
  box[0] = rotate(vec3(d.half_size_x, 0.0, 0.0), transform.rotation);
  box[1] = rotate(vec3(0.0, d.half_size_y, 0.0), transform.rotation);
  box[2] = rotate(vec3(0.0, 0.0, d.half_size_z), transform.rotation);

  float mip; float max_depth;
  if (occlussion_cull_d(d, transform, camera_position, projview_matrix, box, depth_pyramid, mip, max_depth) == 1)
    return;

  uint last_written_vertex = 0xffffffff;
  uint last_id;

  // backface culling
  uint num_added = 0;
  for (int i = 0; i < 6; i++) {
    vec3 point = transform_point(-vox_normals[i], transform, box);

    vec3 dist = point - camera_position;
    vec3 normal = rotate(vox_normals[i], transform.rotation);
    if (dot(dist, normal) <= 0.0) {
      // try to merge drawcalls
      if (last_written_vertex == vertex_offset) {
        out_draws[draw_offset * 3 + last_id].index_count += vertex_count[i] * 3 / 2;
      } else {
        uint id = atomicAdd(draw_count[pass_id].count, 1);
        out_draws[draw_offset * 3 + id].index_count = vertex_count[i] * 3 / 2;
        out_draws[draw_offset * 3 + id].instance_count = 1;
        out_draws[draw_offset * 3 + id].first_index = vertex_offset * 3 / 2;
        out_draws[draw_offset * 3 + id].vertex_offset = d.first_vertex;
        out_draws[draw_offset * 3 + id].first_instance = d.first_instance;
        last_id = id;
        num_added++;
      }

      last_written_vertex = vertex_offset + vertex_count[i];
    }
    vertex_offset += vertex_count[i];
  }

  if (num_added > 0) {
    vertex_offset = d.first_vertex;
    vertex_counts[draw_offset + d.first_instance].count0 = (vertex_offset + d.vertex_count0); vertex_offset += d.vertex_count0;
    vertex_counts[draw_offset + d.first_instance].count1 = (vertex_offset + d.vertex_count1); vertex_offset += d.vertex_count1;
    vertex_counts[draw_offset + d.first_instance].count2 = (vertex_offset + d.vertex_count2); vertex_offset += d.vertex_count2;
    vertex_counts[draw_offset + d.first_instance].count3 = (vertex_offset + d.vertex_count3); vertex_offset += d.vertex_count3;
    vertex_counts[draw_offset + d.first_instance].count4 = (vertex_offset + d.vertex_count4); vertex_offset += d.vertex_count4;
  }
  vertex_counts[draw_offset + d.first_instance].debug_data1 = num_added;
  vertex_counts[draw_offset + d.first_instance].debug_data2 = uint(mip);
  vertex_counts[draw_offset + d.first_instance].debug_data3 = max_depth;
}
