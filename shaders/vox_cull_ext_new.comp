#version 450
#extension GL_GOOGLE_include_directive : enable

layout (local_size_x = 64, local_size_y = 1) in;

#include "common.h"

#define MAX_DRAWCALLS 5

// stride: 48 bytes
struct Draw_Data {
  float half_size_x;
  float half_size_y;
  float half_size_z;
  uint first_vertex;
  uint first_instance;
  uint vertex_count0;
  uint vertex_count1;
  uint vertex_count2;
  uint vertex_count3;
  uint vertex_count4;
  uint vertex_count5;
  uint cull_mask;
};

// stride: 32 bytes
struct Transform {
  quat rotation;
  vec3 position;
  float scale;
};

// stride: 32 bytes
struct Draw_Command {
  uint index_count;
  uint instance_count;
  uint first_index;
  uint vertex_offset;
  uint first_instance;
};

// stride: 32 bytes
struct Vertex_Count {
  uint count0;
  uint count1;
  uint count2;
  uint count3;
  uint count4;
  float udata1;
  float udata2;
  float udata3;
};

// stride: 16 bytes
struct Draw_Count {
  uint count;
};

// storage buffer
layout (std140, set = 0, binding = 0) readonly buffer Storage_Buffer {
  Draw_Data in_draws[];
};

layout (std140, set = 0, binding = 1) readonly buffer Transform_Buffer {
  Transform transforms[];
};

layout (std140, set = 0, binding = 2) writeonly buffer Indirect_Buffer {
  Draw_Command out_draws[];
};

// TODO: move this to vox_cull_persp.comp
layout (std140, set = 0, binding = 3) writeonly buffer Vertex_Buffer {
  Vertex_Count vertex_counts[];
};

layout (std140, set = 0, binding = 4) writeonly buffer Draw_Counts {
  Draw_Count draw_count[];
};

PUSH_CONSTANT Pass_Info {
  mat4 projview_matrix;
  uint cull_mask;
  uint pass_id;
  uint draw_offset;
  uint in_offset;
  uint num_draws;
};

const vec3 vox_normals[6] = {
  {-1.0,  0.0,  0.0},
  { 1.0,  0.0,  0.0},
  { 0.0, -1.0,  0.0},
  { 0.0,  1.0,  0.0},
  { 0.0,  0.0, -1.0},
  { 0.0,  0.0,  1.0}
};

void main() {
  uint draw_index = gl_GlobalInvocationID.x;

  // check if we're out of bounds
  if (draw_index >= num_draws)
    return;

  Draw_Data d = in_draws[draw_index + in_offset];

  Transform transform = transforms[d.first_instance];

  uint vertex_count[6] = {
    d.vertex_count0,
    d.vertex_count1,
    d.vertex_count2,
    d.vertex_count3,
    d.vertex_count4,
    d.vertex_count5,
  };

  uint vertex_offset = d.first_vertex;
  uint out_id = (draw_index + draw_offset) * 3;

  if ((d.cull_mask & cull_mask) == 0) {
    // CLEANUP: remove this
    vertex_counts[draw_offset + d.first_instance].count0 = 0;
    vertex_counts[draw_offset + d.first_instance].count1 = 0;
    vertex_counts[draw_offset + d.first_instance].count2 = 0;
    vertex_counts[draw_offset + d.first_instance].count3 = 0;
    vertex_counts[draw_offset + d.first_instance].count4 = 0;
    return;
  }
  // calculate OBB
  vec3 box[3];
  box[0] = rotate(vec3(d.half_size_x, 0.0, 0.0), transform.rotation);
  box[1] = rotate(vec3(0.0, d.half_size_y, 0.0), transform.rotation);
  box[2] = rotate(vec3(0.0, 0.0, d.half_size_z), transform.rotation);
  const vec3 muls[8] = {
    vec3( -1.0, -1.0, -1.0 ),
    vec3( -1.0, -1.0, 1.0 ),
    vec3( -1.0, 1.0, -1.0 ),
    vec3( -1.0, 1.0, 1.0 ),
    vec3( 1.0, -1.0, -1.0 ),
    vec3( 1.0, -1.0, 1.0 ),
    vec3( 1.0, 1.0, -1.0 ),
    vec3( 1.0, 1.0, 1.0 ),
  };
  vec2 obb_corners[8];
  for (int i = 0; i < 8; i++) {
    vec3 basis[3];
    basis[0] = box[0] * muls[i].x * transform.scale;
    basis[1] = box[1] * muls[i].y * transform.scale;
    basis[2] = box[2] * muls[i].z * transform.scale;
    // position in global space
    vec3 global_space;
    global_space.x = basis[0].x + basis[1].x + basis[2].x + transform.position.x;
    global_space.y = basis[0].y + basis[1].y + basis[2].y + transform.position.y;
    global_space.z = basis[0].z + basis[1].z + basis[2].z + transform.position.z;
    // position on screen
    vec4 ndc = projview_matrix * vec4(global_space, 1.0);
    // do perspective division
    // obb_corners[i] = ndc.xy / abs(ndc.w);
    obb_corners[i] = ndc.xy / ndc.w;
    // if (ndc.w < 0.0) {
    //   if (ndc.x <= ndc.w || ndc.x >= ndc.w) obb_corners[i].x *= -1.0;
    //   if (ndc.y <= ndc.w || ndc.y >= ndc.w) obb_corners[i].y *= -1.0;
    // }
  }
  const uint face_indices[18] = {
#if 0
    0, 1, 3, // -x
    4, 5, 7, // +x
    0, 4, 5, // -y
    2, 6, 7, // +y
    0, 4, 6, // -z
    1, 5, 7, // +z
#else
    4, 6, 7, // -x
    0, 1, 3, // +x
    2, 3, 7, // -y
    0, 4, 5, // +y
    1, 5, 7, // -z
    0, 2, 6, // +z
#endif
  };
  uint total_count = 0;
  for (int i = 0; i < 6; i++) {
    vec2 a = obb_corners[face_indices[i*3]];
    vec2 b = obb_corners[face_indices[i*3+1]];
    vec2 c = obb_corners[face_indices[i*3+2]];
    vec2 d1 = b-a;
    vec2 d2 = c-a;
    float z = d1.x*d2.y - d1.y*d2.x;
    if (z < 0.0) {
      uint id = atomicAdd(draw_count[pass_id].count, 1);
      uint index = draw_offset * MAX_DRAWCALLS + id;
      out_draws[index].index_count = vertex_count[i] * 3 / 2;
      out_draws[index].instance_count = 1;
      out_draws[index].first_index = vertex_offset * 3 / 2;
      out_draws[index].vertex_offset = d.first_vertex;
      out_draws[index].first_instance = d.first_instance;
      total_count++;
    }
    vertex_offset += vertex_count[i];
  }
  vertex_counts[draw_offset + d.first_instance].udata1 = float(total_count);

  vertex_offset = d.first_vertex;
  vertex_counts[draw_offset + d.first_instance].count0 = vertex_offset + d.vertex_count0; vertex_offset += d.vertex_count0;
  vertex_counts[draw_offset + d.first_instance].count1 = vertex_offset + d.vertex_count1; vertex_offset += d.vertex_count1;
  vertex_counts[draw_offset + d.first_instance].count2 = vertex_offset + d.vertex_count2; vertex_offset += d.vertex_count2;
  vertex_counts[draw_offset + d.first_instance].count3 = vertex_offset + d.vertex_count3; vertex_offset += d.vertex_count3;
  vertex_counts[draw_offset + d.first_instance].count4 = vertex_offset + d.vertex_count4; vertex_offset += d.vertex_count4;
}
