#version 450
#extension GL_GOOGLE_include_directive : enable

layout (local_size_x = 64, local_size_y = 1) in;

#include "common.h"

struct Draw_Data {
  uint first_vertex;
  uint instance_count;
  uint first_instance;
  uint vertex_count0;
  uint vertex_count1;
  uint vertex_count2;
  uint vertex_count3;
  uint vertex_count4;
  uint vertex_count5;
  uint cull_mask;
};

struct Transform {
  quat rotation;
  vec3 position;
  float scale;
};

struct Draw_Command {
  uint index_count;
  uint instance_count;
  uint first_index;
  uint vertex_offset;
  uint first_instance;
};

// storage buffer
layout (std140, set = 0, binding = 0) readonly buffer Storage_Buffer {
  Draw_Data in_draws[];
};

layout (std140, set = 0, binding = 1) readonly buffer Transform_Buffer {
  Transform transforms[];
};

layout (std140, set = 0, binding = 2) writeonly buffer Indirect_Buffer {
  Draw_Command out_draws[];
};

PUSH_CONSTANT Pass_Info {
  vec3 camera_front;
  uint cull_mask;
  vec3 camera_position;
  uint draw_offset;
  uint in_offset;
  uint num_draws;
};

const vec3 vox_normals[6] = {
  {-1.0,  0.0,  0.0},
  { 1.0,  0.0,  0.0},
  { 0.0, -1.0,  0.0},
  { 0.0,  1.0,  0.0},
  { 0.0,  0.0, -1.0},
  { 0.0,  0.0,  1.0}
};

void main() {
  uint draw_index = gl_GlobalInvocationID.x;

  // check if we're out of bounds
  if (draw_index >= num_draws)
    return;

  Draw_Data d = in_draws[draw_index + in_offset];

  Transform transform = transforms[d.first_instance];

  uint vertex_count[6] = {
    d.vertex_count0,
    d.vertex_count1,
    d.vertex_count2,
    d.vertex_count3,
    d.vertex_count4,
    d.vertex_count5,
  };

  uint vertex_offset = d.first_vertex;
  uint out_id = draw_index*3 + draw_offset;

#define FILL_ZEROS(i)                                 \
  out_draws[out_id + i].index_count = 0;        \
  out_draws[out_id + i].instance_count = 0;     \
  out_draws[out_id + i].first_index = 0;        \
  out_draws[out_id + i].vertex_offset = 0;      \
  out_draws[out_id + i].first_instance = 0

#define EMIT_DRAW(i, id)                                           \
  out_draws[out_id + i].index_count = vertex_count[id] * 3 / 2; \
  out_draws[out_id + i].instance_count = d.instance_count;      \
  out_draws[out_id + i].first_index = vertex_offset * 3 / 2;    \
  out_draws[out_id + i].vertex_offset = d.first_vertex;         \
  out_draws[out_id + i].first_instance = d.first_instance

  if ((d.cull_mask & cull_mask) == 0) {
    FILL_ZEROS(0);
    FILL_ZEROS(1);
    FILL_ZEROS(2);
    return;
  }
  vec3 dist = transform.position - camera_position;
  // backface culling
  for (int i = 0; i < 3; i++) {
    vec3 normal = rotate(vox_normals[2*i], transform.rotation);
    if (dot(dist, normal) <= 0) {
      EMIT_DRAW(i, 2*i);
      vertex_offset += vertex_count[2*i] + vertex_count[2*i+1];
    } else {
      vertex_offset += vertex_count[2*i];
      EMIT_DRAW(i, 2*i+1);
      vertex_offset += vertex_count[2*i+1];
    }
  }
}
